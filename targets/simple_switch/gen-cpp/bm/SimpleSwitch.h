/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleSwitch_H
#define SimpleSwitch_H

#include <thrift/TDispatchProcessor.h>
#include "simple_switch_types.h"

namespace sswitch_runtime {

class SimpleSwitchIf {
 public:
  virtual ~SimpleSwitchIf() {}
  virtual int32_t mirroring_mapping_add(const int32_t mirror_id, const int32_t egress_port) = 0;
  virtual int32_t mirroring_mapping_delete(const int32_t mirror_id) = 0;
  virtual int32_t mirroring_mapping_get_egress_port(const int32_t mirror_id) = 0;
  virtual void mirroring_session_add(const int32_t mirror_id, const MirroringSessionConfig& config) = 0;
  virtual void mirroring_session_delete(const int32_t mirror_id) = 0;
  virtual void mirroring_session_get(MirroringSessionConfig& _return, const int32_t mirror_id) = 0;
  virtual int32_t set_egress_queue_depth(const int32_t port_num, const int32_t depth_pkts) = 0;
  virtual int32_t set_all_egress_queue_depths(const int32_t depth_pkts) = 0;
  virtual int32_t set_egress_queue_rate(const int32_t port_num, const int64_t rate_pps) = 0;
  virtual int32_t set_all_egress_queue_rates(const int64_t rate_pps) = 0;
  virtual int64_t get_time_elapsed_us() = 0;
  virtual int64_t get_time_since_epoch_us() = 0;
};

class SimpleSwitchIfFactory {
 public:
  typedef SimpleSwitchIf Handler;

  virtual ~SimpleSwitchIfFactory() {}

  virtual SimpleSwitchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SimpleSwitchIf* /* handler */) = 0;
};

class SimpleSwitchIfSingletonFactory : virtual public SimpleSwitchIfFactory {
 public:
  SimpleSwitchIfSingletonFactory(const boost::shared_ptr<SimpleSwitchIf>& iface) : iface_(iface) {}
  virtual ~SimpleSwitchIfSingletonFactory() {}

  virtual SimpleSwitchIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SimpleSwitchIf* /* handler */) {}

 protected:
  boost::shared_ptr<SimpleSwitchIf> iface_;
};

class SimpleSwitchNull : virtual public SimpleSwitchIf {
 public:
  virtual ~SimpleSwitchNull() {}
  int32_t mirroring_mapping_add(const int32_t /* mirror_id */, const int32_t /* egress_port */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t mirroring_mapping_delete(const int32_t /* mirror_id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t mirroring_mapping_get_egress_port(const int32_t /* mirror_id */) {
    int32_t _return = 0;
    return _return;
  }
  void mirroring_session_add(const int32_t /* mirror_id */, const MirroringSessionConfig& /* config */) {
    return;
  }
  void mirroring_session_delete(const int32_t /* mirror_id */) {
    return;
  }
  void mirroring_session_get(MirroringSessionConfig& /* _return */, const int32_t /* mirror_id */) {
    return;
  }
  int32_t set_egress_queue_depth(const int32_t /* port_num */, const int32_t /* depth_pkts */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_all_egress_queue_depths(const int32_t /* depth_pkts */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_egress_queue_rate(const int32_t /* port_num */, const int64_t /* rate_pps */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t set_all_egress_queue_rates(const int64_t /* rate_pps */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t get_time_elapsed_us() {
    int64_t _return = 0;
    return _return;
  }
  int64_t get_time_since_epoch_us() {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _SimpleSwitch_mirroring_mapping_add_args__isset {
  _SimpleSwitch_mirroring_mapping_add_args__isset() : mirror_id(false), egress_port(false) {}
  bool mirror_id :1;
  bool egress_port :1;
} _SimpleSwitch_mirroring_mapping_add_args__isset;

class SimpleSwitch_mirroring_mapping_add_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  SimpleSwitch_mirroring_mapping_add_args(const SimpleSwitch_mirroring_mapping_add_args&);
  SimpleSwitch_mirroring_mapping_add_args& operator=(const SimpleSwitch_mirroring_mapping_add_args&);
  SimpleSwitch_mirroring_mapping_add_args() : mirror_id(0), egress_port(0) {
  }

  virtual ~SimpleSwitch_mirroring_mapping_add_args() throw();
  int32_t mirror_id;
  int32_t egress_port;

  _SimpleSwitch_mirroring_mapping_add_args__isset __isset;

  void __set_mirror_id(const int32_t val);

  void __set_egress_port(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_mapping_add_args & rhs) const
  {
    if (!(mirror_id == rhs.mirror_id))
      return false;
    if (!(egress_port == rhs.egress_port))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_mapping_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_mapping_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_add_args& obj);
};


class SimpleSwitch_mirroring_mapping_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~SimpleSwitch_mirroring_mapping_add_pargs() throw();
  const int32_t* mirror_id;
  const int32_t* egress_port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_add_pargs& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_add_result__isset {
  _SimpleSwitch_mirroring_mapping_add_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_mirroring_mapping_add_result__isset;

class SimpleSwitch_mirroring_mapping_add_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_mirroring_mapping_add_result(const SimpleSwitch_mirroring_mapping_add_result&);
  SimpleSwitch_mirroring_mapping_add_result& operator=(const SimpleSwitch_mirroring_mapping_add_result&);
  SimpleSwitch_mirroring_mapping_add_result() : success(0) {
  }

  virtual ~SimpleSwitch_mirroring_mapping_add_result() throw();
  int32_t success;

  _SimpleSwitch_mirroring_mapping_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_mapping_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_mapping_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_mapping_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_add_result& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_add_presult__isset {
  _SimpleSwitch_mirroring_mapping_add_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_mirroring_mapping_add_presult__isset;

class SimpleSwitch_mirroring_mapping_add_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_mirroring_mapping_add_presult() throw();
  int32_t* success;

  _SimpleSwitch_mirroring_mapping_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_add_presult& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_delete_args__isset {
  _SimpleSwitch_mirroring_mapping_delete_args__isset() : mirror_id(false) {}
  bool mirror_id :1;
} _SimpleSwitch_mirroring_mapping_delete_args__isset;

class SimpleSwitch_mirroring_mapping_delete_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SimpleSwitch_mirroring_mapping_delete_args(const SimpleSwitch_mirroring_mapping_delete_args&);
  SimpleSwitch_mirroring_mapping_delete_args& operator=(const SimpleSwitch_mirroring_mapping_delete_args&);
  SimpleSwitch_mirroring_mapping_delete_args() : mirror_id(0) {
  }

  virtual ~SimpleSwitch_mirroring_mapping_delete_args() throw();
  int32_t mirror_id;

  _SimpleSwitch_mirroring_mapping_delete_args__isset __isset;

  void __set_mirror_id(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_mapping_delete_args & rhs) const
  {
    if (!(mirror_id == rhs.mirror_id))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_mapping_delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_mapping_delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_delete_args& obj);
};


class SimpleSwitch_mirroring_mapping_delete_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SimpleSwitch_mirroring_mapping_delete_pargs() throw();
  const int32_t* mirror_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_delete_pargs& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_delete_result__isset {
  _SimpleSwitch_mirroring_mapping_delete_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_mirroring_mapping_delete_result__isset;

class SimpleSwitch_mirroring_mapping_delete_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_mirroring_mapping_delete_result(const SimpleSwitch_mirroring_mapping_delete_result&);
  SimpleSwitch_mirroring_mapping_delete_result& operator=(const SimpleSwitch_mirroring_mapping_delete_result&);
  SimpleSwitch_mirroring_mapping_delete_result() : success(0) {
  }

  virtual ~SimpleSwitch_mirroring_mapping_delete_result() throw();
  int32_t success;

  _SimpleSwitch_mirroring_mapping_delete_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_mapping_delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_mapping_delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_mapping_delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_delete_result& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_delete_presult__isset {
  _SimpleSwitch_mirroring_mapping_delete_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_mirroring_mapping_delete_presult__isset;

class SimpleSwitch_mirroring_mapping_delete_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_mirroring_mapping_delete_presult() throw();
  int32_t* success;

  _SimpleSwitch_mirroring_mapping_delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_delete_presult& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_get_egress_port_args__isset {
  _SimpleSwitch_mirroring_mapping_get_egress_port_args__isset() : mirror_id(false) {}
  bool mirror_id :1;
} _SimpleSwitch_mirroring_mapping_get_egress_port_args__isset;

class SimpleSwitch_mirroring_mapping_get_egress_port_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SimpleSwitch_mirroring_mapping_get_egress_port_args(const SimpleSwitch_mirroring_mapping_get_egress_port_args&);
  SimpleSwitch_mirroring_mapping_get_egress_port_args& operator=(const SimpleSwitch_mirroring_mapping_get_egress_port_args&);
  SimpleSwitch_mirroring_mapping_get_egress_port_args() : mirror_id(0) {
  }

  virtual ~SimpleSwitch_mirroring_mapping_get_egress_port_args() throw();
  int32_t mirror_id;

  _SimpleSwitch_mirroring_mapping_get_egress_port_args__isset __isset;

  void __set_mirror_id(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_mapping_get_egress_port_args & rhs) const
  {
    if (!(mirror_id == rhs.mirror_id))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_mapping_get_egress_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_mapping_get_egress_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_get_egress_port_args& obj);
};


class SimpleSwitch_mirroring_mapping_get_egress_port_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SimpleSwitch_mirroring_mapping_get_egress_port_pargs() throw();
  const int32_t* mirror_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_get_egress_port_pargs& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_get_egress_port_result__isset {
  _SimpleSwitch_mirroring_mapping_get_egress_port_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_mirroring_mapping_get_egress_port_result__isset;

class SimpleSwitch_mirroring_mapping_get_egress_port_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_mirroring_mapping_get_egress_port_result(const SimpleSwitch_mirroring_mapping_get_egress_port_result&);
  SimpleSwitch_mirroring_mapping_get_egress_port_result& operator=(const SimpleSwitch_mirroring_mapping_get_egress_port_result&);
  SimpleSwitch_mirroring_mapping_get_egress_port_result() : success(0) {
  }

  virtual ~SimpleSwitch_mirroring_mapping_get_egress_port_result() throw();
  int32_t success;

  _SimpleSwitch_mirroring_mapping_get_egress_port_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_mapping_get_egress_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_mapping_get_egress_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_mapping_get_egress_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_get_egress_port_result& obj);
};

typedef struct _SimpleSwitch_mirroring_mapping_get_egress_port_presult__isset {
  _SimpleSwitch_mirroring_mapping_get_egress_port_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_mirroring_mapping_get_egress_port_presult__isset;

class SimpleSwitch_mirroring_mapping_get_egress_port_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_mirroring_mapping_get_egress_port_presult() throw();
  int32_t* success;

  _SimpleSwitch_mirroring_mapping_get_egress_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_mapping_get_egress_port_presult& obj);
};

typedef struct _SimpleSwitch_mirroring_session_add_args__isset {
  _SimpleSwitch_mirroring_session_add_args__isset() : mirror_id(false), config(false) {}
  bool mirror_id :1;
  bool config :1;
} _SimpleSwitch_mirroring_session_add_args__isset;

class SimpleSwitch_mirroring_session_add_args {
 public:

  static const char* ascii_fingerprint; // = "56BFEA06EF96A960B151C3F24C80EDC2";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xBF,0xEA,0x06,0xEF,0x96,0xA9,0x60,0xB1,0x51,0xC3,0xF2,0x4C,0x80,0xED,0xC2};

  SimpleSwitch_mirroring_session_add_args(const SimpleSwitch_mirroring_session_add_args&);
  SimpleSwitch_mirroring_session_add_args& operator=(const SimpleSwitch_mirroring_session_add_args&);
  SimpleSwitch_mirroring_session_add_args() : mirror_id(0) {
  }

  virtual ~SimpleSwitch_mirroring_session_add_args() throw();
  int32_t mirror_id;
  MirroringSessionConfig config;

  _SimpleSwitch_mirroring_session_add_args__isset __isset;

  void __set_mirror_id(const int32_t val);

  void __set_config(const MirroringSessionConfig& val);

  bool operator == (const SimpleSwitch_mirroring_session_add_args & rhs) const
  {
    if (!(mirror_id == rhs.mirror_id))
      return false;
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_session_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_session_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_add_args& obj);
};


class SimpleSwitch_mirroring_session_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "56BFEA06EF96A960B151C3F24C80EDC2";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xBF,0xEA,0x06,0xEF,0x96,0xA9,0x60,0xB1,0x51,0xC3,0xF2,0x4C,0x80,0xED,0xC2};


  virtual ~SimpleSwitch_mirroring_session_add_pargs() throw();
  const int32_t* mirror_id;
  const MirroringSessionConfig* config;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_add_pargs& obj);
};

typedef struct _SimpleSwitch_mirroring_session_add_result__isset {
  _SimpleSwitch_mirroring_session_add_result__isset() : ouch(false) {}
  bool ouch :1;
} _SimpleSwitch_mirroring_session_add_result__isset;

class SimpleSwitch_mirroring_session_add_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  SimpleSwitch_mirroring_session_add_result(const SimpleSwitch_mirroring_session_add_result&);
  SimpleSwitch_mirroring_session_add_result& operator=(const SimpleSwitch_mirroring_session_add_result&);
  SimpleSwitch_mirroring_session_add_result() {
  }

  virtual ~SimpleSwitch_mirroring_session_add_result() throw();
  InvalidMirroringOperation ouch;

  _SimpleSwitch_mirroring_session_add_result__isset __isset;

  void __set_ouch(const InvalidMirroringOperation& val);

  bool operator == (const SimpleSwitch_mirroring_session_add_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_session_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_session_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_add_result& obj);
};

typedef struct _SimpleSwitch_mirroring_session_add_presult__isset {
  _SimpleSwitch_mirroring_session_add_presult__isset() : ouch(false) {}
  bool ouch :1;
} _SimpleSwitch_mirroring_session_add_presult__isset;

class SimpleSwitch_mirroring_session_add_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~SimpleSwitch_mirroring_session_add_presult() throw();
  InvalidMirroringOperation ouch;

  _SimpleSwitch_mirroring_session_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_add_presult& obj);
};

typedef struct _SimpleSwitch_mirroring_session_delete_args__isset {
  _SimpleSwitch_mirroring_session_delete_args__isset() : mirror_id(false) {}
  bool mirror_id :1;
} _SimpleSwitch_mirroring_session_delete_args__isset;

class SimpleSwitch_mirroring_session_delete_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SimpleSwitch_mirroring_session_delete_args(const SimpleSwitch_mirroring_session_delete_args&);
  SimpleSwitch_mirroring_session_delete_args& operator=(const SimpleSwitch_mirroring_session_delete_args&);
  SimpleSwitch_mirroring_session_delete_args() : mirror_id(0) {
  }

  virtual ~SimpleSwitch_mirroring_session_delete_args() throw();
  int32_t mirror_id;

  _SimpleSwitch_mirroring_session_delete_args__isset __isset;

  void __set_mirror_id(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_session_delete_args & rhs) const
  {
    if (!(mirror_id == rhs.mirror_id))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_session_delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_session_delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_delete_args& obj);
};


class SimpleSwitch_mirroring_session_delete_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SimpleSwitch_mirroring_session_delete_pargs() throw();
  const int32_t* mirror_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_delete_pargs& obj);
};

typedef struct _SimpleSwitch_mirroring_session_delete_result__isset {
  _SimpleSwitch_mirroring_session_delete_result__isset() : ouch(false) {}
  bool ouch :1;
} _SimpleSwitch_mirroring_session_delete_result__isset;

class SimpleSwitch_mirroring_session_delete_result {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};

  SimpleSwitch_mirroring_session_delete_result(const SimpleSwitch_mirroring_session_delete_result&);
  SimpleSwitch_mirroring_session_delete_result& operator=(const SimpleSwitch_mirroring_session_delete_result&);
  SimpleSwitch_mirroring_session_delete_result() {
  }

  virtual ~SimpleSwitch_mirroring_session_delete_result() throw();
  InvalidMirroringOperation ouch;

  _SimpleSwitch_mirroring_session_delete_result__isset __isset;

  void __set_ouch(const InvalidMirroringOperation& val);

  bool operator == (const SimpleSwitch_mirroring_session_delete_result & rhs) const
  {
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_session_delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_session_delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_delete_result& obj);
};

typedef struct _SimpleSwitch_mirroring_session_delete_presult__isset {
  _SimpleSwitch_mirroring_session_delete_presult__isset() : ouch(false) {}
  bool ouch :1;
} _SimpleSwitch_mirroring_session_delete_presult__isset;

class SimpleSwitch_mirroring_session_delete_presult {
 public:

  static const char* ascii_fingerprint; // = "448EBD233DB60CDC7A5210FF16C995EA";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0x8E,0xBD,0x23,0x3D,0xB6,0x0C,0xDC,0x7A,0x52,0x10,0xFF,0x16,0xC9,0x95,0xEA};


  virtual ~SimpleSwitch_mirroring_session_delete_presult() throw();
  InvalidMirroringOperation ouch;

  _SimpleSwitch_mirroring_session_delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_delete_presult& obj);
};

typedef struct _SimpleSwitch_mirroring_session_get_args__isset {
  _SimpleSwitch_mirroring_session_get_args__isset() : mirror_id(false) {}
  bool mirror_id :1;
} _SimpleSwitch_mirroring_session_get_args__isset;

class SimpleSwitch_mirroring_session_get_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SimpleSwitch_mirroring_session_get_args(const SimpleSwitch_mirroring_session_get_args&);
  SimpleSwitch_mirroring_session_get_args& operator=(const SimpleSwitch_mirroring_session_get_args&);
  SimpleSwitch_mirroring_session_get_args() : mirror_id(0) {
  }

  virtual ~SimpleSwitch_mirroring_session_get_args() throw();
  int32_t mirror_id;

  _SimpleSwitch_mirroring_session_get_args__isset __isset;

  void __set_mirror_id(const int32_t val);

  bool operator == (const SimpleSwitch_mirroring_session_get_args & rhs) const
  {
    if (!(mirror_id == rhs.mirror_id))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_session_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_session_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_get_args& obj);
};


class SimpleSwitch_mirroring_session_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SimpleSwitch_mirroring_session_get_pargs() throw();
  const int32_t* mirror_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_get_pargs& obj);
};

typedef struct _SimpleSwitch_mirroring_session_get_result__isset {
  _SimpleSwitch_mirroring_session_get_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _SimpleSwitch_mirroring_session_get_result__isset;

class SimpleSwitch_mirroring_session_get_result {
 public:

  static const char* ascii_fingerprint; // = "52827D44FEA8D920BD417716FB04BC03";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x82,0x7D,0x44,0xFE,0xA8,0xD9,0x20,0xBD,0x41,0x77,0x16,0xFB,0x04,0xBC,0x03};

  SimpleSwitch_mirroring_session_get_result(const SimpleSwitch_mirroring_session_get_result&);
  SimpleSwitch_mirroring_session_get_result& operator=(const SimpleSwitch_mirroring_session_get_result&);
  SimpleSwitch_mirroring_session_get_result() {
  }

  virtual ~SimpleSwitch_mirroring_session_get_result() throw();
  MirroringSessionConfig success;
  InvalidMirroringOperation ouch;

  _SimpleSwitch_mirroring_session_get_result__isset __isset;

  void __set_success(const MirroringSessionConfig& val);

  void __set_ouch(const InvalidMirroringOperation& val);

  bool operator == (const SimpleSwitch_mirroring_session_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_mirroring_session_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_mirroring_session_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_get_result& obj);
};

typedef struct _SimpleSwitch_mirroring_session_get_presult__isset {
  _SimpleSwitch_mirroring_session_get_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _SimpleSwitch_mirroring_session_get_presult__isset;

class SimpleSwitch_mirroring_session_get_presult {
 public:

  static const char* ascii_fingerprint; // = "52827D44FEA8D920BD417716FB04BC03";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x82,0x7D,0x44,0xFE,0xA8,0xD9,0x20,0xBD,0x41,0x77,0x16,0xFB,0x04,0xBC,0x03};


  virtual ~SimpleSwitch_mirroring_session_get_presult() throw();
  MirroringSessionConfig* success;
  InvalidMirroringOperation ouch;

  _SimpleSwitch_mirroring_session_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_mirroring_session_get_presult& obj);
};

typedef struct _SimpleSwitch_set_egress_queue_depth_args__isset {
  _SimpleSwitch_set_egress_queue_depth_args__isset() : port_num(false), depth_pkts(false) {}
  bool port_num :1;
  bool depth_pkts :1;
} _SimpleSwitch_set_egress_queue_depth_args__isset;

class SimpleSwitch_set_egress_queue_depth_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  SimpleSwitch_set_egress_queue_depth_args(const SimpleSwitch_set_egress_queue_depth_args&);
  SimpleSwitch_set_egress_queue_depth_args& operator=(const SimpleSwitch_set_egress_queue_depth_args&);
  SimpleSwitch_set_egress_queue_depth_args() : port_num(0), depth_pkts(0) {
  }

  virtual ~SimpleSwitch_set_egress_queue_depth_args() throw();
  int32_t port_num;
  int32_t depth_pkts;

  _SimpleSwitch_set_egress_queue_depth_args__isset __isset;

  void __set_port_num(const int32_t val);

  void __set_depth_pkts(const int32_t val);

  bool operator == (const SimpleSwitch_set_egress_queue_depth_args & rhs) const
  {
    if (!(port_num == rhs.port_num))
      return false;
    if (!(depth_pkts == rhs.depth_pkts))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_egress_queue_depth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_egress_queue_depth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_depth_args& obj);
};


class SimpleSwitch_set_egress_queue_depth_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~SimpleSwitch_set_egress_queue_depth_pargs() throw();
  const int32_t* port_num;
  const int32_t* depth_pkts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_depth_pargs& obj);
};

typedef struct _SimpleSwitch_set_egress_queue_depth_result__isset {
  _SimpleSwitch_set_egress_queue_depth_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_egress_queue_depth_result__isset;

class SimpleSwitch_set_egress_queue_depth_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_set_egress_queue_depth_result(const SimpleSwitch_set_egress_queue_depth_result&);
  SimpleSwitch_set_egress_queue_depth_result& operator=(const SimpleSwitch_set_egress_queue_depth_result&);
  SimpleSwitch_set_egress_queue_depth_result() : success(0) {
  }

  virtual ~SimpleSwitch_set_egress_queue_depth_result() throw();
  int32_t success;

  _SimpleSwitch_set_egress_queue_depth_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_set_egress_queue_depth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_egress_queue_depth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_egress_queue_depth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_depth_result& obj);
};

typedef struct _SimpleSwitch_set_egress_queue_depth_presult__isset {
  _SimpleSwitch_set_egress_queue_depth_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_egress_queue_depth_presult__isset;

class SimpleSwitch_set_egress_queue_depth_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_set_egress_queue_depth_presult() throw();
  int32_t* success;

  _SimpleSwitch_set_egress_queue_depth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_depth_presult& obj);
};

typedef struct _SimpleSwitch_set_all_egress_queue_depths_args__isset {
  _SimpleSwitch_set_all_egress_queue_depths_args__isset() : depth_pkts(false) {}
  bool depth_pkts :1;
} _SimpleSwitch_set_all_egress_queue_depths_args__isset;

class SimpleSwitch_set_all_egress_queue_depths_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  SimpleSwitch_set_all_egress_queue_depths_args(const SimpleSwitch_set_all_egress_queue_depths_args&);
  SimpleSwitch_set_all_egress_queue_depths_args& operator=(const SimpleSwitch_set_all_egress_queue_depths_args&);
  SimpleSwitch_set_all_egress_queue_depths_args() : depth_pkts(0) {
  }

  virtual ~SimpleSwitch_set_all_egress_queue_depths_args() throw();
  int32_t depth_pkts;

  _SimpleSwitch_set_all_egress_queue_depths_args__isset __isset;

  void __set_depth_pkts(const int32_t val);

  bool operator == (const SimpleSwitch_set_all_egress_queue_depths_args & rhs) const
  {
    if (!(depth_pkts == rhs.depth_pkts))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_all_egress_queue_depths_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_all_egress_queue_depths_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_depths_args& obj);
};


class SimpleSwitch_set_all_egress_queue_depths_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~SimpleSwitch_set_all_egress_queue_depths_pargs() throw();
  const int32_t* depth_pkts;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_depths_pargs& obj);
};

typedef struct _SimpleSwitch_set_all_egress_queue_depths_result__isset {
  _SimpleSwitch_set_all_egress_queue_depths_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_all_egress_queue_depths_result__isset;

class SimpleSwitch_set_all_egress_queue_depths_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_set_all_egress_queue_depths_result(const SimpleSwitch_set_all_egress_queue_depths_result&);
  SimpleSwitch_set_all_egress_queue_depths_result& operator=(const SimpleSwitch_set_all_egress_queue_depths_result&);
  SimpleSwitch_set_all_egress_queue_depths_result() : success(0) {
  }

  virtual ~SimpleSwitch_set_all_egress_queue_depths_result() throw();
  int32_t success;

  _SimpleSwitch_set_all_egress_queue_depths_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_set_all_egress_queue_depths_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_all_egress_queue_depths_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_all_egress_queue_depths_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_depths_result& obj);
};

typedef struct _SimpleSwitch_set_all_egress_queue_depths_presult__isset {
  _SimpleSwitch_set_all_egress_queue_depths_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_all_egress_queue_depths_presult__isset;

class SimpleSwitch_set_all_egress_queue_depths_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_set_all_egress_queue_depths_presult() throw();
  int32_t* success;

  _SimpleSwitch_set_all_egress_queue_depths_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_depths_presult& obj);
};

typedef struct _SimpleSwitch_set_egress_queue_rate_args__isset {
  _SimpleSwitch_set_egress_queue_rate_args__isset() : port_num(false), rate_pps(false) {}
  bool port_num :1;
  bool rate_pps :1;
} _SimpleSwitch_set_egress_queue_rate_args__isset;

class SimpleSwitch_set_egress_queue_rate_args {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};

  SimpleSwitch_set_egress_queue_rate_args(const SimpleSwitch_set_egress_queue_rate_args&);
  SimpleSwitch_set_egress_queue_rate_args& operator=(const SimpleSwitch_set_egress_queue_rate_args&);
  SimpleSwitch_set_egress_queue_rate_args() : port_num(0), rate_pps(0) {
  }

  virtual ~SimpleSwitch_set_egress_queue_rate_args() throw();
  int32_t port_num;
  int64_t rate_pps;

  _SimpleSwitch_set_egress_queue_rate_args__isset __isset;

  void __set_port_num(const int32_t val);

  void __set_rate_pps(const int64_t val);

  bool operator == (const SimpleSwitch_set_egress_queue_rate_args & rhs) const
  {
    if (!(port_num == rhs.port_num))
      return false;
    if (!(rate_pps == rhs.rate_pps))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_egress_queue_rate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_egress_queue_rate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_rate_args& obj);
};


class SimpleSwitch_set_egress_queue_rate_pargs {
 public:

  static const char* ascii_fingerprint; // = "9C2A05F173B50306037BDE9AE30E1B99";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x2A,0x05,0xF1,0x73,0xB5,0x03,0x06,0x03,0x7B,0xDE,0x9A,0xE3,0x0E,0x1B,0x99};


  virtual ~SimpleSwitch_set_egress_queue_rate_pargs() throw();
  const int32_t* port_num;
  const int64_t* rate_pps;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_rate_pargs& obj);
};

typedef struct _SimpleSwitch_set_egress_queue_rate_result__isset {
  _SimpleSwitch_set_egress_queue_rate_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_egress_queue_rate_result__isset;

class SimpleSwitch_set_egress_queue_rate_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_set_egress_queue_rate_result(const SimpleSwitch_set_egress_queue_rate_result&);
  SimpleSwitch_set_egress_queue_rate_result& operator=(const SimpleSwitch_set_egress_queue_rate_result&);
  SimpleSwitch_set_egress_queue_rate_result() : success(0) {
  }

  virtual ~SimpleSwitch_set_egress_queue_rate_result() throw();
  int32_t success;

  _SimpleSwitch_set_egress_queue_rate_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_set_egress_queue_rate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_egress_queue_rate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_egress_queue_rate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_rate_result& obj);
};

typedef struct _SimpleSwitch_set_egress_queue_rate_presult__isset {
  _SimpleSwitch_set_egress_queue_rate_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_egress_queue_rate_presult__isset;

class SimpleSwitch_set_egress_queue_rate_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_set_egress_queue_rate_presult() throw();
  int32_t* success;

  _SimpleSwitch_set_egress_queue_rate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_egress_queue_rate_presult& obj);
};

typedef struct _SimpleSwitch_set_all_egress_queue_rates_args__isset {
  _SimpleSwitch_set_all_egress_queue_rates_args__isset() : rate_pps(false) {}
  bool rate_pps :1;
} _SimpleSwitch_set_all_egress_queue_rates_args__isset;

class SimpleSwitch_set_all_egress_queue_rates_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  SimpleSwitch_set_all_egress_queue_rates_args(const SimpleSwitch_set_all_egress_queue_rates_args&);
  SimpleSwitch_set_all_egress_queue_rates_args& operator=(const SimpleSwitch_set_all_egress_queue_rates_args&);
  SimpleSwitch_set_all_egress_queue_rates_args() : rate_pps(0) {
  }

  virtual ~SimpleSwitch_set_all_egress_queue_rates_args() throw();
  int64_t rate_pps;

  _SimpleSwitch_set_all_egress_queue_rates_args__isset __isset;

  void __set_rate_pps(const int64_t val);

  bool operator == (const SimpleSwitch_set_all_egress_queue_rates_args & rhs) const
  {
    if (!(rate_pps == rhs.rate_pps))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_all_egress_queue_rates_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_all_egress_queue_rates_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_rates_args& obj);
};


class SimpleSwitch_set_all_egress_queue_rates_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~SimpleSwitch_set_all_egress_queue_rates_pargs() throw();
  const int64_t* rate_pps;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_rates_pargs& obj);
};

typedef struct _SimpleSwitch_set_all_egress_queue_rates_result__isset {
  _SimpleSwitch_set_all_egress_queue_rates_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_all_egress_queue_rates_result__isset;

class SimpleSwitch_set_all_egress_queue_rates_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  SimpleSwitch_set_all_egress_queue_rates_result(const SimpleSwitch_set_all_egress_queue_rates_result&);
  SimpleSwitch_set_all_egress_queue_rates_result& operator=(const SimpleSwitch_set_all_egress_queue_rates_result&);
  SimpleSwitch_set_all_egress_queue_rates_result() : success(0) {
  }

  virtual ~SimpleSwitch_set_all_egress_queue_rates_result() throw();
  int32_t success;

  _SimpleSwitch_set_all_egress_queue_rates_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SimpleSwitch_set_all_egress_queue_rates_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_set_all_egress_queue_rates_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_set_all_egress_queue_rates_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_rates_result& obj);
};

typedef struct _SimpleSwitch_set_all_egress_queue_rates_presult__isset {
  _SimpleSwitch_set_all_egress_queue_rates_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_set_all_egress_queue_rates_presult__isset;

class SimpleSwitch_set_all_egress_queue_rates_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~SimpleSwitch_set_all_egress_queue_rates_presult() throw();
  int32_t* success;

  _SimpleSwitch_set_all_egress_queue_rates_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_set_all_egress_queue_rates_presult& obj);
};


class SimpleSwitch_get_time_elapsed_us_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SimpleSwitch_get_time_elapsed_us_args(const SimpleSwitch_get_time_elapsed_us_args&);
  SimpleSwitch_get_time_elapsed_us_args& operator=(const SimpleSwitch_get_time_elapsed_us_args&);
  SimpleSwitch_get_time_elapsed_us_args() {
  }

  virtual ~SimpleSwitch_get_time_elapsed_us_args() throw();

  bool operator == (const SimpleSwitch_get_time_elapsed_us_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimpleSwitch_get_time_elapsed_us_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_get_time_elapsed_us_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_elapsed_us_args& obj);
};


class SimpleSwitch_get_time_elapsed_us_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SimpleSwitch_get_time_elapsed_us_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_elapsed_us_pargs& obj);
};

typedef struct _SimpleSwitch_get_time_elapsed_us_result__isset {
  _SimpleSwitch_get_time_elapsed_us_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_get_time_elapsed_us_result__isset;

class SimpleSwitch_get_time_elapsed_us_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  SimpleSwitch_get_time_elapsed_us_result(const SimpleSwitch_get_time_elapsed_us_result&);
  SimpleSwitch_get_time_elapsed_us_result& operator=(const SimpleSwitch_get_time_elapsed_us_result&);
  SimpleSwitch_get_time_elapsed_us_result() : success(0) {
  }

  virtual ~SimpleSwitch_get_time_elapsed_us_result() throw();
  int64_t success;

  _SimpleSwitch_get_time_elapsed_us_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SimpleSwitch_get_time_elapsed_us_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_get_time_elapsed_us_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_get_time_elapsed_us_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_elapsed_us_result& obj);
};

typedef struct _SimpleSwitch_get_time_elapsed_us_presult__isset {
  _SimpleSwitch_get_time_elapsed_us_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_get_time_elapsed_us_presult__isset;

class SimpleSwitch_get_time_elapsed_us_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~SimpleSwitch_get_time_elapsed_us_presult() throw();
  int64_t* success;

  _SimpleSwitch_get_time_elapsed_us_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_elapsed_us_presult& obj);
};


class SimpleSwitch_get_time_since_epoch_us_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  SimpleSwitch_get_time_since_epoch_us_args(const SimpleSwitch_get_time_since_epoch_us_args&);
  SimpleSwitch_get_time_since_epoch_us_args& operator=(const SimpleSwitch_get_time_since_epoch_us_args&);
  SimpleSwitch_get_time_since_epoch_us_args() {
  }

  virtual ~SimpleSwitch_get_time_since_epoch_us_args() throw();

  bool operator == (const SimpleSwitch_get_time_since_epoch_us_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SimpleSwitch_get_time_since_epoch_us_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_get_time_since_epoch_us_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_since_epoch_us_args& obj);
};


class SimpleSwitch_get_time_since_epoch_us_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~SimpleSwitch_get_time_since_epoch_us_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_since_epoch_us_pargs& obj);
};

typedef struct _SimpleSwitch_get_time_since_epoch_us_result__isset {
  _SimpleSwitch_get_time_since_epoch_us_result__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_get_time_since_epoch_us_result__isset;

class SimpleSwitch_get_time_since_epoch_us_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  SimpleSwitch_get_time_since_epoch_us_result(const SimpleSwitch_get_time_since_epoch_us_result&);
  SimpleSwitch_get_time_since_epoch_us_result& operator=(const SimpleSwitch_get_time_since_epoch_us_result&);
  SimpleSwitch_get_time_since_epoch_us_result() : success(0) {
  }

  virtual ~SimpleSwitch_get_time_since_epoch_us_result() throw();
  int64_t success;

  _SimpleSwitch_get_time_since_epoch_us_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SimpleSwitch_get_time_since_epoch_us_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SimpleSwitch_get_time_since_epoch_us_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleSwitch_get_time_since_epoch_us_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_since_epoch_us_result& obj);
};

typedef struct _SimpleSwitch_get_time_since_epoch_us_presult__isset {
  _SimpleSwitch_get_time_since_epoch_us_presult__isset() : success(false) {}
  bool success :1;
} _SimpleSwitch_get_time_since_epoch_us_presult__isset;

class SimpleSwitch_get_time_since_epoch_us_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~SimpleSwitch_get_time_since_epoch_us_presult() throw();
  int64_t* success;

  _SimpleSwitch_get_time_since_epoch_us_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SimpleSwitch_get_time_since_epoch_us_presult& obj);
};

class SimpleSwitchClient : virtual public SimpleSwitchIf {
 public:
  SimpleSwitchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SimpleSwitchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t mirroring_mapping_add(const int32_t mirror_id, const int32_t egress_port);
  void send_mirroring_mapping_add(const int32_t mirror_id, const int32_t egress_port);
  int32_t recv_mirroring_mapping_add();
  int32_t mirroring_mapping_delete(const int32_t mirror_id);
  void send_mirroring_mapping_delete(const int32_t mirror_id);
  int32_t recv_mirroring_mapping_delete();
  int32_t mirroring_mapping_get_egress_port(const int32_t mirror_id);
  void send_mirroring_mapping_get_egress_port(const int32_t mirror_id);
  int32_t recv_mirroring_mapping_get_egress_port();
  void mirroring_session_add(const int32_t mirror_id, const MirroringSessionConfig& config);
  void send_mirroring_session_add(const int32_t mirror_id, const MirroringSessionConfig& config);
  void recv_mirroring_session_add();
  void mirroring_session_delete(const int32_t mirror_id);
  void send_mirroring_session_delete(const int32_t mirror_id);
  void recv_mirroring_session_delete();
  void mirroring_session_get(MirroringSessionConfig& _return, const int32_t mirror_id);
  void send_mirroring_session_get(const int32_t mirror_id);
  void recv_mirroring_session_get(MirroringSessionConfig& _return);
  int32_t set_egress_queue_depth(const int32_t port_num, const int32_t depth_pkts);
  void send_set_egress_queue_depth(const int32_t port_num, const int32_t depth_pkts);
  int32_t recv_set_egress_queue_depth();
  int32_t set_all_egress_queue_depths(const int32_t depth_pkts);
  void send_set_all_egress_queue_depths(const int32_t depth_pkts);
  int32_t recv_set_all_egress_queue_depths();
  int32_t set_egress_queue_rate(const int32_t port_num, const int64_t rate_pps);
  void send_set_egress_queue_rate(const int32_t port_num, const int64_t rate_pps);
  int32_t recv_set_egress_queue_rate();
  int32_t set_all_egress_queue_rates(const int64_t rate_pps);
  void send_set_all_egress_queue_rates(const int64_t rate_pps);
  int32_t recv_set_all_egress_queue_rates();
  int64_t get_time_elapsed_us();
  void send_get_time_elapsed_us();
  int64_t recv_get_time_elapsed_us();
  int64_t get_time_since_epoch_us();
  void send_get_time_since_epoch_us();
  int64_t recv_get_time_since_epoch_us();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SimpleSwitchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SimpleSwitchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SimpleSwitchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_mirroring_mapping_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mirroring_mapping_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mirroring_mapping_get_egress_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mirroring_session_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mirroring_session_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mirroring_session_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_egress_queue_depth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_all_egress_queue_depths(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_egress_queue_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_all_egress_queue_rates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_time_elapsed_us(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_time_since_epoch_us(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SimpleSwitchProcessor(boost::shared_ptr<SimpleSwitchIf> iface) :
    iface_(iface) {
    processMap_["mirroring_mapping_add"] = &SimpleSwitchProcessor::process_mirroring_mapping_add;
    processMap_["mirroring_mapping_delete"] = &SimpleSwitchProcessor::process_mirroring_mapping_delete;
    processMap_["mirroring_mapping_get_egress_port"] = &SimpleSwitchProcessor::process_mirroring_mapping_get_egress_port;
    processMap_["mirroring_session_add"] = &SimpleSwitchProcessor::process_mirroring_session_add;
    processMap_["mirroring_session_delete"] = &SimpleSwitchProcessor::process_mirroring_session_delete;
    processMap_["mirroring_session_get"] = &SimpleSwitchProcessor::process_mirroring_session_get;
    processMap_["set_egress_queue_depth"] = &SimpleSwitchProcessor::process_set_egress_queue_depth;
    processMap_["set_all_egress_queue_depths"] = &SimpleSwitchProcessor::process_set_all_egress_queue_depths;
    processMap_["set_egress_queue_rate"] = &SimpleSwitchProcessor::process_set_egress_queue_rate;
    processMap_["set_all_egress_queue_rates"] = &SimpleSwitchProcessor::process_set_all_egress_queue_rates;
    processMap_["get_time_elapsed_us"] = &SimpleSwitchProcessor::process_get_time_elapsed_us;
    processMap_["get_time_since_epoch_us"] = &SimpleSwitchProcessor::process_get_time_since_epoch_us;
  }

  virtual ~SimpleSwitchProcessor() {}
};

class SimpleSwitchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SimpleSwitchProcessorFactory(const ::boost::shared_ptr< SimpleSwitchIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SimpleSwitchIfFactory > handlerFactory_;
};

class SimpleSwitchMultiface : virtual public SimpleSwitchIf {
 public:
  SimpleSwitchMultiface(std::vector<boost::shared_ptr<SimpleSwitchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SimpleSwitchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SimpleSwitchIf> > ifaces_;
  SimpleSwitchMultiface() {}
  void add(boost::shared_ptr<SimpleSwitchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t mirroring_mapping_add(const int32_t mirror_id, const int32_t egress_port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirroring_mapping_add(mirror_id, egress_port);
    }
    return ifaces_[i]->mirroring_mapping_add(mirror_id, egress_port);
  }

  int32_t mirroring_mapping_delete(const int32_t mirror_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirroring_mapping_delete(mirror_id);
    }
    return ifaces_[i]->mirroring_mapping_delete(mirror_id);
  }

  int32_t mirroring_mapping_get_egress_port(const int32_t mirror_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirroring_mapping_get_egress_port(mirror_id);
    }
    return ifaces_[i]->mirroring_mapping_get_egress_port(mirror_id);
  }

  void mirroring_session_add(const int32_t mirror_id, const MirroringSessionConfig& config) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirroring_session_add(mirror_id, config);
    }
    ifaces_[i]->mirroring_session_add(mirror_id, config);
  }

  void mirroring_session_delete(const int32_t mirror_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirroring_session_delete(mirror_id);
    }
    ifaces_[i]->mirroring_session_delete(mirror_id);
  }

  void mirroring_session_get(MirroringSessionConfig& _return, const int32_t mirror_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mirroring_session_get(_return, mirror_id);
    }
    ifaces_[i]->mirroring_session_get(_return, mirror_id);
    return;
  }

  int32_t set_egress_queue_depth(const int32_t port_num, const int32_t depth_pkts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_egress_queue_depth(port_num, depth_pkts);
    }
    return ifaces_[i]->set_egress_queue_depth(port_num, depth_pkts);
  }

  int32_t set_all_egress_queue_depths(const int32_t depth_pkts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_all_egress_queue_depths(depth_pkts);
    }
    return ifaces_[i]->set_all_egress_queue_depths(depth_pkts);
  }

  int32_t set_egress_queue_rate(const int32_t port_num, const int64_t rate_pps) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_egress_queue_rate(port_num, rate_pps);
    }
    return ifaces_[i]->set_egress_queue_rate(port_num, rate_pps);
  }

  int32_t set_all_egress_queue_rates(const int64_t rate_pps) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_all_egress_queue_rates(rate_pps);
    }
    return ifaces_[i]->set_all_egress_queue_rates(rate_pps);
  }

  int64_t get_time_elapsed_us() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_time_elapsed_us();
    }
    return ifaces_[i]->get_time_elapsed_us();
  }

  int64_t get_time_since_epoch_us() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_time_since_epoch_us();
    }
    return ifaces_[i]->get_time_since_epoch_us();
  }

};

} // namespace

#endif
